{"version":3,"sources":["components/Dropdown.js","components/DistrictDropdown.js","components/Header.js","components/Forecast.js","components/ForecastCollection.js","components/Body.js","App.js","reportWebVitals.js","index.js"],"names":["Dropdown","optionList","placeholder","selectedItem","setSelectedItem","useState","isDDOpen","setDDState","headerLabel","setHeaderLabel","className","onClick","role","map","option","id","label","DistrictDropdown","selectedDistrict","setSelectedDistrict","districtList","setDistrictList","fetchDistricts","a","fetch","response","json","data","useEffect","districts","updateDistricts","district","globalIdLocal","local","Header","class","WeatherType","Map","Forecast","weatherTypeID","minTemp","maxTemp","forecastDate","weatherTypeDesc","setWeatherTypeDesc","fetchDescription","newWeatherDescMap","forEach","weatherDescObj","set","idWeatherType","descIdWeatherTypeEN","descIdWeatherTypePT","populateWeatherDescMap","src","get","alt","size","ForecastCollection","forecastData","setForecastData","fetchForecast","forecast","forecastDataPromisse","updateForecastData","forecastObj","tMin","tMax","split","reverse","join","Body","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b1dc3ab.chunk.js","sourcesContent":["import { AngleDownIcon, AngleUpIcon, CheckIcon } from \"react-line-awesome\";\nimport { useState } from \"react\";\nimport PropTypes from 'prop-types'\nimport './styles/Dropdown.css'\nimport '../App.css'\n\nconst Dropdown = ( { optionList, placeholder, selectedItem, setSelectedItem } ) => {\n    const [isDDOpen, setDDState] = useState(false);\n    const [headerLabel, setHeaderLabel] = useState(placeholder);\n\n    return (\n        <div className=\"dd-wrapper\">\n            <button className={`dd-header dd-btn ${isDDOpen && \"dd-header-open\"}`} onClick={() => setDDState(!isDDOpen)}>\n                <div className=\"dd-header-title\">{headerLabel}</div>\n                <div className=\"dd-header-arrow\">\n                    {isDDOpen ? (<AngleUpIcon className=\"la-lg\"/>) : (<AngleDownIcon className=\"la-lg\"/>)}\n                </div>    \n            </button>\n            {isDDOpen && (\n                <div className=\"dd-open-separator\">\n                    <hr className=\"dd-hr\"/>\n                </div>\n            )}\n            {isDDOpen && (\n                <div className={`dd-list ${isDDOpen && \"dd-list-open\"}`} role=\"list\">\n                    {optionList.map(option => (\n                        <button className=\"dd-list-item dd-btn\" key={option.id} onClick={() => {\n                            setSelectedItem(option.id);\n                            setHeaderLabel(option.label);\n                        }}>\n                            <div className=\"dd-list-item-label\">{option.label}</div>\n                            <div className=\"dd-list-item-check\">{(selectedItem === option.id) && (<CheckIcon className=\"la-sm\"/>)}</div>\n                        </button>\n                    ))}\n                </div>\n            )}\n        </div>\n    )\n}\n\nDropdown.propTypes = {\n    placeholder: PropTypes.string.isRequired,\n    selectedItem: PropTypes.number.isRequired,\n    optionList: PropTypes.arrayOf(PropTypes.exact({\n        id: PropTypes.number.isRequired,\n        label: PropTypes.string.isRequired\n    })).isRequired\n}\n\nexport default Dropdown\n","import { useState, useEffect } from 'react';\nimport Dropdown from './Dropdown'\n\nconst DistrictDropdown = ( {selectedDistrict, setSelectedDistrict} ) => {\n    const [districtList, setDistrictList] = useState([]);\n\n    //Fetches districts from IPMA API\n    const fetchDistricts = async() => {\n        let response = await fetch(\"https://api.ipma.pt/open-data/distrits-islands.json\");\n        let data = await response.json();\n\n        return data;\n    }\n\n    const getFormatedDistricts = () => {\n        return districtList.map((district) => {\n            return ({\n                id: district.globalIdLocal,\n                label: district.local \n            })\n        })\n    }\n\n    useEffect(() => {\n        //This function both fetches districts from the API and changes the state of the App component\n        const updateDistricts = async() => {\n            let districts = await fetchDistricts();\n            setDistrictList(districts.data);\n        }\n\n        updateDistricts();\n    }, []);\n\n    return (\n        <>\n            <Dropdown placeholder={\"No district selected\"} optionList={getFormatedDistricts()} selectedItem={selectedDistrict} setSelectedItem={setSelectedDistrict}/>\n        </>\n    )\n}\n\nexport default DistrictDropdown\n","import DistrictDropdown from \"./DistrictDropdown\"\nimport './styles/Header.css'\n\nconst Header = ( {selectedDistrict, setSelectedDistrict} ) => {\n    return (\n        <header>\n            <div className=\"left-side\">\n                <h1 id=\"website-name\">Portugal Weather</h1>\n            </div>\n            <div className=\"right-side\">\n                <DistrictDropdown class=\"dropdown\" selectedDistrict={selectedDistrict} setSelectedDistrict={setSelectedDistrict}/>\n            </div>\n        </header>\n    )\n}\n\nexport default Header\n","import PropTypes from 'prop-types'\r\nimport { useEffect, useState } from 'react';\r\nimport './styles/Forecast.css'\r\n\r\nconst WeatherType = new Map([\r\n    [1, \"https://img.icons8.com/fluency/156/000000/sun.png\"],\r\n    [2, \"https://img.icons8.com/fluency/156/000000/partly-cloudy-day.png\"],\r\n    [3, \"https://img.icons8.com/fluency/156/000000/cloud.png\"],\r\n    [4, \"https://img.icons8.com/fluency/156/000000/clouds.png\"],\r\n    [5, \"https://img.icons8.com/fluency/156/000000/clouds.png\"],\r\n    [6, \"https://img.icons8.com/fluency/156/000000/rain.png\"],\r\n    [7, \"https://img.icons8.com/fluency/156/000000/light-rain.png\"],\r\n    [8, \"https://img.icons8.com/fluency/156/000000/intense-rain.png\"],\r\n    [9, \"https://img.icons8.com/fluency/156/000000/rain.png\"],\r\n    [10, \"https://img.icons8.com/fluency/156/000000/light-rain.png\"],\r\n    [11, \"https://img.icons8.com/fluency/156/000000/intense-rain.png\"],\r\n    [12, \"https://img.icons8.com/fluency/156/000000/rain.png\"],\r\n    [13, \"https://img.icons8.com/fluency/156/000000/light-rain.png\"],\r\n    [14, \"https://img.icons8.com/fluency/156/000000/intense-rain.png\"],\r\n    [15, \"https://img.icons8.com/fluency/156/000000/light-rain-2.png\"],\r\n    [16, \"https://img.icons8.com/fluency/156/000000/foggy-night-1.png\"],\r\n    [17, \"https://img.icons8.com/fluency/156/000000/foggy-night-1.png\"],\r\n    [18, \"https://img.icons8.com/fluency/156/000000/snow.png\"],\r\n    [19, \"https://img.icons8.com/fluency/156/000000/cloud-lighting.png\"],\r\n    [20, \"https://img.icons8.com/fluency/156/000000/storm.png\"],\r\n    [21, \"https://img.icons8.com/fluency/156/000000/hail.png\"],\r\n    [22, \"https://img.icons8.com/fluency/156/000000/winter.png\"],\r\n    [23, \"https://img.icons8.com/fluency/156/000000/storm.png\"],\r\n    [24, \"https://img.icons8.com/fluency/156/000000/clouds.png\"],\r\n    [25, \"https://img.icons8.com/fluency/156/000000/clouds.png\"],\r\n    [26, \"https://img.icons8.com/fluency/156/000000/foggy-night-1.png\"],\r\n    [27, \"https://img.icons8.com/fluency/156/000000/clouds.png\"]\r\n]);\r\n\r\nconst Forecast = ({weatherTypeID, minTemp, maxTemp, forecastDate}) => {\r\n    const [weatherTypeDesc, setWeatherTypeDesc] = useState(new Map());\r\n\r\n    useEffect(() => {\r\n        const fetchDescription = async() => {\r\n            let response = await fetch(\"https://api.ipma.pt/open-data/weather-type-classe.json\");\r\n            let data = await response.json();\r\n\r\n            return data;\r\n        }\r\n\r\n        const populateWeatherDescMap = async () => {\r\n            let newWeatherDescMap = new Map();\r\n            let allWeatherDescObj = await fetchDescription();\r\n\r\n            allWeatherDescObj.data.forEach((weatherDescObj) => {\r\n                newWeatherDescMap.set(\r\n                    weatherDescObj.idWeatherType, \r\n                    {\r\n                        descIdWeatherTypeEN: weatherDescObj.descIdWeatherTypeEN, \r\n                        descIdWeatherTypePT: weatherDescObj.descIdWeatherTypePT\r\n                });\r\n            })\r\n\r\n            setWeatherTypeDesc(newWeatherDescMap);\r\n        }\r\n\r\n        populateWeatherDescMap();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"forecast-container\">\r\n            <div className=\"forecast-date-container\">\r\n                <div className=\"forecast-date\">{forecastDate}</div>\r\n            </div>\r\n            <hr/>\r\n            <div className=\"forecast-weather-type-container\">\r\n                <div className=\"forecast-weather-type-img forecast-weather-type-content\">\r\n                    <img src={WeatherType.get(weatherTypeID)} alt={(weatherTypeDesc.size !== 0) ? weatherTypeDesc.get(weatherTypeID).descIdWeatherTypePT : \"Placeholder\"}/>\r\n                </div>\r\n                <div className=\"forecast-weather-type-desc forecast-weather-type-content\">\r\n                    <p>{(weatherTypeDesc.size !== 0) ? weatherTypeDesc.get(weatherTypeID).descIdWeatherTypePT : \"Loading...\" }</p>\r\n                </div>\r\n            </div>\r\n            <hr/>\r\n            <div className=\"forecast-temp-container\">\r\n                <div className=\"forecast-temp-min-container\">\r\n                    <p className=\"forecast-temp-min\">Min: {minTemp}ºC</p>\r\n                </div>\r\n                <div className=\"forecast-temp-max-container\">\r\n                    <p className=\"forecast-temp-max\">Max: {maxTemp}ºC</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nForecast.propTypes = {\r\n    weatherTypeID: PropTypes.number.isRequired,\r\n    minTemp: PropTypes.string.isRequired,\r\n    maxTemp: PropTypes.string.isRequired,\r\n    forecastDate: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Forecast","import { useEffect, useState } from \"react\";\r\nimport Forecast from './Forecast'\r\nimport './styles/ForecastCollection.css'\r\n\r\nconst ForecastCollection = ({selectedDistrict}) => {\r\n    const [forecastData, setForecastData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchForecast = async() => {\r\n            let response = await fetch(`https://api.ipma.pt/open-data/forecast/meteorology/cities/daily/${selectedDistrict}.json`);\r\n            let forecast = await response.json();\r\n    \r\n            return forecast;\r\n        }\r\n\r\n        const updateForecastData = async() => {\r\n            let forecastDataPromisse = await fetchForecast();\r\n            setForecastData(forecastDataPromisse.data);\r\n        }\r\n        if (selectedDistrict !== -1) {\r\n            updateForecastData();\r\n        }\r\n    }, [selectedDistrict]);\r\n\r\n    return (\r\n        <ul className=\"forecast-collection-container\">\r\n            {(selectedDistrict !== -1) && (forecastData.map((forecastObj) => (\r\n                <li className=\"forecast-collection-item\" key={forecastObj.forecastDate}>\r\n                    <Forecast className=\"forecast-collection-element\" weatherTypeID={forecastObj.idWeatherType} minTemp={forecastObj.tMin} maxTemp={forecastObj.tMax} forecastDate={forecastObj.forecastDate.split(\"-\").reverse().join(\"/\")}/>\r\n                </li>\r\n            )))}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default ForecastCollection\r\n","import ForecastCollection from './ForecastCollection'\r\nimport './styles/Body.css'\r\n\r\nexport const Body = ( {selectedDistrict} ) => {\r\n    return (\r\n        <div className=\"forecast-body\">\r\n            <ForecastCollection selectedDistrict={selectedDistrict}/>\r\n        </div>\r\n    )\r\n}\r\n","import Header from './components/Header';\nimport './App.css'\nimport { useState } from 'react';\nimport { Body } from './components/Body';\n\nfunction App() {\n  const [selectedDistrict, setSelectedDistrict] = useState(-1);\n\n  return (\n    <div id=\"app-container\">\n      <Header selectedDistrict={selectedDistrict} setSelectedDistrict={setSelectedDistrict}/>\n      <Body selectedDistrict={selectedDistrict}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}